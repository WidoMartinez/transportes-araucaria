/* eslint-env node */
/* global process */
// Migraci√≥n para agregar columna codigo_reserva a la tabla reservas
import sequelize from "../config/database.js";

async function addCodigoReservaColumn() {
	try {
		console.log("üîÑ Iniciando migraci√≥n: Agregar columna codigo_reserva...");

		// Agregar la columna codigo_reserva si no existe
		await sequelize.query(`
			ALTER TABLE reservas 
			ADD COLUMN IF NOT EXISTS codigo_reserva VARCHAR(50) NULL UNIQUE
			COMMENT 'C√≥digo √∫nico de reserva (formato: AR-YYYYMMDD-XXXX)';
		`);

		console.log("‚úÖ Columna codigo_reserva agregada exitosamente");

		// Crear √≠ndice √∫nico si no existe
		await sequelize.query(`
			CREATE UNIQUE INDEX IF NOT EXISTS idx_codigo_reserva 
			ON reservas(codigo_reserva);
		`);

		console.log("‚úÖ √çndice √∫nico para codigo_reserva creado exitosamente");

		// Generar c√≥digos de reserva para registros existentes
		console.log("üîÑ Generando c√≥digos para reservas existentes...");

		const [reservasSinCodigo] = await sequelize.query(`
			SELECT id, created_at 
			FROM reservas 
			WHERE codigo_reserva IS NULL 
			ORDER BY created_at ASC;
		`);

		console.log(`üìã Encontradas ${reservasSinCodigo.length} reservas sin c√≥digo`);

		// Generar c√≥digos por fecha
		const reservasPorFecha = {};
		
		for (const reserva of reservasSinCodigo) {
			const fecha = new Date(reserva.created_at);
			const a√±o = fecha.getFullYear();
			const mes = String(fecha.getMonth() + 1).padStart(2, '0');
			const dia = String(fecha.getDate()).padStart(2, '0');
			const fechaStr = `${a√±o}${mes}${dia}`;

			if (!reservasPorFecha[fechaStr]) {
				reservasPorFecha[fechaStr] = 0;
			}

			reservasPorFecha[fechaStr]++;
			const consecutivo = String(reservasPorFecha[fechaStr]).padStart(4, '0');
			const codigoReserva = `AR-${fechaStr}-${consecutivo}`;

			// Actualizar la reserva con el c√≥digo generado
			await sequelize.query(`
				UPDATE reservas 
				SET codigo_reserva = :codigoReserva 
				WHERE id = :id;
			`, {
				replacements: { codigoReserva, id: reserva.id }
			});
		}

		console.log(`‚úÖ C√≥digos generados para ${reservasSinCodigo.length} reservas existentes`);
		console.log("‚úÖ Migraci√≥n completada exitosamente");

	} catch (error) {
		console.error("‚ùå Error en la migraci√≥n:", error);
		throw error;
	}
}

// Ejecutar migraci√≥n si se llama directamente
if (import.meta.url === `file://${process.argv[1]}`) {
	addCodigoReservaColumn()
		.then(() => {
			console.log("‚úÖ Proceso de migraci√≥n finalizado");
			process.exit(0);
		})
		.catch((error) => {
			console.error("‚ùå Error fatal en migraci√≥n:", error);
			process.exit(1);
		});
}

export default addCodigoReservaColumn;

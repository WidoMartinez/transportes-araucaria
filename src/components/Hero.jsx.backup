import React, { useEffect, useMemo, useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "./ui/card";
import { Label } from "./ui/label";
import { Input } from "./ui/input";
import { Textarea } from "./ui/textarea";
import { Button } from "./ui/button";
import { Badge } from "./ui/badge";
import { Progress } from "./ui/progress";
import { Checkbox } from "./ui/checkbox";
import { CheckCircle2, LoaderCircle } from "lucide-react";
import heroVan from "../assets/hero-van.png";
import flow from "../assets/formasPago/flow.png";
import merPago from "../assets/formasPago/mp.png";

function Hero({
	formData,
	handleInputChange,
	origenes,
	destinos,
	maxPasajeros,
	minDateTime,
	phoneError,
	setPhoneError,
	isSubmitting,
	cotizacion,
	pricing,
	descuentoRate,
	baseDiscountRate,
	promotionDiscountRate,
	roundTripDiscountRate,
	activePromotion,
	reviewChecklist,
	setReviewChecklist,
	canPay,
	handlePayment,
	loadingGateway,
	setFormData,
	onSubmitWizard,
	validarTelefono,
	validarHorarioReserva,
	showSummary,
}) {
	const [currentStep, setCurrentStep] = useState(0);
	const [stepError, setStepError] = useState("");
	const [selectedCharge, setSelectedCharge] = useState(null);
	const [selectedMethod, setSelectedMethod] = useState(null);

	const steps = useMemo(
		() => [
			{
				title: "1. Tu viaje",
				description: "Selecciona origen, destino, fecha y pasajeros.",
			},
			{
				title: "2. Tus datos",
				description: "Completa la información de contacto y extras.",
			},
			{
				title: "3. Revisar y pagar",
				description: "Confirma el resumen y paga online con descuento.",
			},
		],
		[]
	);

	const progressValue = useMemo(() => {
		const safeStep = Math.min(currentStep, steps.length - 1);
		return Math.round(((safeStep + 1) / steps.length) * 100);
	}, [currentStep, steps.length]);

	const currencyFormatter = useMemo(
		() =>
			new Intl.NumberFormat("es-CL", {
				style: "currency",
				currency: "CLP",
			}),
		[]
	);

	const formatCurrency = (value) => currencyFormatter.format(value || 0);

	const origenFinal =
		formData.origen === "Otro"
			? formData.otroOrigen || "Por confirmar"
			: formData.origen || "Por confirmar";
	const destinoFinal =
		formData.destino === "Otro"
			? formData.otroDestino || "Por confirmar"
			: formData.destino || "Por confirmar";

	const fechaLegible = useMemo(() => {
		if (!formData.fecha) return "Por confirmar";
		const parsed = new Date(`${formData.fecha}T00:00:00`);
		if (Number.isNaN(parsed.getTime())) return formData.fecha;
		return parsed.toLocaleDateString("es-CL", {
			dateStyle: "long",
			timeZone: "America/Santiago",
		});
	}, [formData.fecha]);

	const horaLegible = formData.hora ? `${formData.hora} hrs` : "Por confirmar";
	const pasajerosLabel = `${formData.pasajeros || "1"} pasajero(s)`;
	const vehiculoSugerido = cotizacion.vehiculo || "A confirmar";

	const tieneCotizacionAutomatica = typeof cotizacion.precio === "number";
	const requiereCotizacionManual =
		formData.destino === "Otro" ||
		(formData.destino && !tieneCotizacionAutomatica);
	const mostrarPrecio = tieneCotizacionAutomatica;

	const promotionDetails = useMemo(() => {
		if (!activePromotion) return null;
		const parts = [];
		if (activePromotion.aplicaPorDias && activePromotion.dias.length) {
			parts.push(`Días: ${activePromotion.dias.join(", ")}`);
		}
		if (
			activePromotion.aplicaPorHorario &&
			activePromotion.horaInicio &&
			activePromotion.horaFin
		) {
			parts.push(
				`Horario: ${activePromotion.horaInicio} - ${activePromotion.horaFin} hrs`
			);
		}
		return parts.join(" · ");
	}, [activePromotion]);

	useEffect(() => {
		if (showSummary) {
			setCurrentStep(2);
		}
	}, [showSummary]);

	useEffect(() => {
		if (
			!showSummary &&
			!formData.destino &&
			!formData.fecha &&
			!formData.nombre &&
			!formData.telefono
		) {
			setCurrentStep(0);
		}
	}, [
		showSummary,
		formData.destino,
		formData.fecha,
		formData.nombre,
		formData.telefono,
	]);

	useEffect(() => {
		setStepError("");
	}, [currentStep]);

	const handleStepOneNext = () => {
		if (!formData.origen.trim()) {
			setStepError("Indica el origen de tu viaje.");
			return;
		}

		if (!formData.destino) {
			setStepError("Selecciona un destino para continuar.");
			return;
		}

		if (!formData.fecha) {
			setStepError("Selecciona la fecha de tu traslado.");
			return;
		}

		if (!formData.hora) {
			setStepError("Selecciona la hora de recogida.");
			return;
		}

		const validacion = validarHorarioReserva();
		if (!validacion.esValido) {
			setStepError(validacion.mensaje);
			return;
		}

		if (formData.idaVuelta) {
			if (!formData.fechaRegreso) {
				setStepError("Selecciona la fecha de regreso.");
				return;
			}
			if (!formData.horaRegreso) {
				setStepError("Selecciona la hora del regreso.");
				return;
			}
			const salida = new Date(`${formData.fecha}T${formData.hora}`);
			const regreso = new Date(
				`${formData.fechaRegreso}T${formData.horaRegreso}`
			);
			if (Number.isNaN(regreso.getTime())) {
				setStepError("La fecha de regreso no es válida.");
				return;
			}
			if (regreso <= salida) {
				setStepError(
					"El regreso debe ser posterior al viaje de ida. Revisa la fecha y hora seleccionadas."
				);
				return;
			}
		}

		setStepError("");
		setCurrentStep(1);
	};

	const handleStepTwoNext = async () => {
		if (!formData.nombre.trim()) {
			setStepError("Ingresa el nombre del pasajero principal.");
			return;
		}

		if (!formData.email.trim()) {
			setStepError(
				"Necesitamos un correo electrónico para enviar la confirmación."
			);
			return;
		}

		const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
		if (!emailRegex.test(formData.email)) {
			setStepError("El correo electrónico ingresado no es válido.");
			return;
		}

		if (!formData.telefono.trim()) {
			setStepError("Indica un teléfono móvil de contacto.");
			return;
		}

		if (!validarTelefono(formData.telefono)) {
			setPhoneError(
				"Por favor, introduce un número de móvil chileno válido (ej: +56 9 1234 5678)."
			);
			setStepError("Revisa el número de teléfono antes de continuar.");
			return;
		}

		setPhoneError("");
		setStepError("");

		if (requiereCotizacionManual) {
			setCurrentStep(2);
			return;
		}

		const result = await onSubmitWizard();

		if (!result.success) {
			if (result.error === "horario" && result.message) {
				setStepError(result.message);
				setCurrentStep(0);
			} else if (result.error === "server" && result.message) {
				setStepError(`No pudimos enviar tu reserva: ${result.message}`);
			} else if (result.error === "telefono") {
				setStepError("Revisa el número de teléfono ingresado.");
			}
			return;
		}

		setStepError("");
		setCurrentStep(2);
	};

	const handleStepBack = () => {
		setCurrentStep((prev) => Math.max(prev - 1, 0));
	};

	const baseDiscountPercentage = Math.round((baseDiscountRate || 0) * 100);
	const promoDiscountPercentage = Math.round(
		(promotionDiscountRate || 0) * 100
	);
	const roundTripDiscountPercentage = Math.round(
		(roundTripDiscountRate || 0) * 100
	);
	const totalDiscountPercentage = Math.round(descuentoRate * 100);

	const chargeOptions = useMemo(
		() => [
			{
				id: "abono",
				type: "abono",
				title: "Pagar 40% ahora",
				subtitle: "Reserva tu cupo abonando el 40%",
				amount: pricing.abono,
				disabled: pricing.abono <= 0,
			},
			{
				id: "total",
				type: "total",
				title: "Pagar el 100%",
				subtitle: "Cancela ahora y aprovecha todo el descuento",
				amount: pricing.totalConDescuento,
				disabled: pricing.totalConDescuento <= 0,
			},
		],
		[pricing.abono, pricing.totalConDescuento]
	);

	const paymentMethods = useMemo(
		() => [
			{
				id: "flow",
				gateway: "flow",
				title: "Flow",
				subtitle: "Webpay, tarjetas y transferencia",
				image: flow,
			},
			{
				id: "mercadopago",
				gateway: "mercadopago",
				title: "Mercado Pago",
				subtitle: "Tarjetas y billetera Mercado Pago",
				image: merPago,
			},
		],
		[]
	);

	const selectedChargeData = useMemo(
		() => chargeOptions.find((option) => option.id === selectedCharge) || null,
		[chargeOptions, selectedCharge]
	);

	const selectedMethodData = useMemo(
		() => paymentMethods.find((method) => method.id === selectedMethod) || null,
		[paymentMethods, selectedMethod]
	);

	useEffect(() => {
		const defaultCharge = chargeOptions.find((option) => !option.disabled);
		setSelectedCharge((prev) =>
			prev && chargeOptions.some((opt) => opt.id === prev && !opt.disabled)
				? prev
				: defaultCharge?.id || null
		);
	}, [chargeOptions]);

	useEffect(() => {
		const defaultMethod = paymentMethods[0];
		setSelectedMethod((prev) =>
			prev && paymentMethods.some((opt) => opt.id === prev)
				? prev
				: defaultMethod?.id || null
		);
	}, [paymentMethods]);

	const selectedCombinationLoading =
		selectedChargeData && selectedMethodData
			? loadingGateway ===
			  `${selectedMethodData.gateway}-${selectedChargeData.type}`
			: false;
	const isAnotherGatewayLoading = Boolean(
		loadingGateway && !selectedCombinationLoading
	);
	const canTriggerPayment = Boolean(
		selectedChargeData &&
			!selectedChargeData.disabled &&
			selectedMethodData &&
			!requiereCotizacionManual &&
			canPay &&
			!isSubmitting &&
			!isAnotherGatewayLoading &&
			!selectedCombinationLoading
	);

	return (
		<section
			id="inicio"
			className="relative bg-gradient-to-r from-primary to-secondary text-white min-h-screen flex items-center"
		>
			<div className="absolute inset-0 bg-black/30"></div>
			<div
				className="absolute inset-0 bg-cover bg-center bg-no-repeat"
				style={{ backgroundImage: `url(${heroVan})` }}
			></div>
			<div className="relative container mx-auto px-4 text-center pb-16 md:pb-24">
				<h2 className="text-5xl md:text-6xl font-bold mb-6 mt-8 animate-fade-in-down">
					Traslados Privados Aeropuerto La Araucanía
					<br />
					<span className="text-accent">Temuco, Pucón y Villarrica</span>
				</h2>
				<p className="text-xl md:text-2xl mb-8 max-w-3xl mx-auto">
					Transportes Araucaria conecta el Aeropuerto La Araucanía con Temuco,
					Pucón, Villarrica y los principales hoteles de la región. Reserva en
					línea, confirma tu conductor y asegura el {baseDiscountPercentage}% de
					descuento web garantizado
					{promoDiscountPercentage > 0
						? ` + ${promoDiscountPercentage}% extra por promociones activas`
						: ""}
					{roundTripDiscountPercentage > 0
						? ` + ${roundTripDiscountPercentage}% adicional por reservar ida y vuelta`
						: ""}
					.
				</p>

				<div className="max-w-6xl mx-auto">
					{/* Header minimalista */}
					<div className="mb-8 text-center">
						<h3 className="text-3xl font-bold text-white mb-2">Reserva tu traslado</h3>
						<p className="text-white/80">Proceso rápido y seguro</p>
					</div>

					{/* Indicador de progreso minimalista */}
					<div className="mb-8">
						<div className="flex items-center justify-center space-x-4 mb-4">
							{steps.map((step, index) => {
								const isCompleted = index < currentStep;
								const isActive = index === currentStep;
								
								return (
									<div key={step.title} className="flex items-center">
										<div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${
											isCompleted 
												? "bg-green-500 text-white" 
												: isActive 
												? "bg-white text-primary" 
												: "bg-white/20 text-white/60"
										}`}>
											{isCompleted ? <CheckCircle2 className="w-5 h-5" /> : index + 1}
										</div>
										{index < steps.length - 1 && (
											<div className={`w-12 h-0.5 mx-2 ${
												isCompleted ? "bg-green-500" : "bg-white/20"
											}`} />
										)}
									</div>
								);
							})}
						</div>
						<div className="w-full bg-white/20 rounded-full h-1">
							<div 
								className="bg-white h-1 rounded-full transition-all duration-300"
								style={{ width: `${progressValue}%` }}
							/>
						</div>
					</div>

					{/* Contenido principal */}
					<Card className="bg-white/95 backdrop-blur-sm shadow-2xl border-0 text-left">
					<CardContent className="p-8">
						{currentStep === 0 && (
							<div className="space-y-8">
								{/* Información del viaje */}
								<div className="space-y-6">
									<h4 className="text-xl font-semibold text-gray-900 border-b pb-2">Información del viaje</h4>
									
									<div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
										<div className="space-y-4">
											<div className="space-y-2">
												<Label htmlFor="origen-hero" className="text-sm font-medium text-gray-700">Origen</Label>
												<select
													id="origen-hero"
													name="origen"
													value={formData.origen}
													onChange={handleInputChange}
													className="w-full h-12 px-4 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent transition-colors"
													required
												>
													{origenes.map((origen) => (
														<option key={origen} value={origen}>
															{origen}
														</option>
													))}
												</select>
											</div>
											
											<div className="space-y-2">
												<Label htmlFor="destino-hero" className="text-sm font-medium text-gray-700">Destino</Label>
												<select
													id="destino-hero"
													name="destino"
													value={formData.destino}
													onChange={handleInputChange}
													className="w-full h-12 px-4 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent transition-colors"
													required
												>
													<option value="">Seleccionar destino</option>
													{destinos.map((d) => (
														<option key={d} value={d}>
															{d}
														</option>
													))}
												</select>
											</div>
										</div>

										<div className="space-y-4">
											<div className="grid grid-cols-2 gap-4">
												<div className="space-y-2">
													<Label htmlFor="fecha-hero" className="text-sm font-medium text-gray-700">Fecha</Label>
													<Input
														id="fecha-hero"
														type="date"
														name="fecha"
														value={formData.fecha}
														onChange={handleInputChange}
														min={minDateTime}
														className="h-12"
														required
													/>
												</div>
												<div className="space-y-2">
													<Label htmlFor="hora-hero" className="text-sm font-medium text-gray-700">Hora</Label>
													<Input
														id="hora-hero"
														type="time"
														name="hora"
														value={formData.hora}
														onChange={handleInputChange}
														className="h-12"
														required
													/>
												</div>
											</div>
											
											<div className="space-y-2">
												<Label htmlFor="pasajeros-hero" className="text-sm font-medium text-gray-700">Pasajeros</Label>
												<select
													id="pasajeros-hero"
													name="pasajeros"
													value={formData.pasajeros}
													onChange={handleInputChange}
													className="w-full h-12 px-4 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent transition-colors"
													required
												>
													{[...Array(maxPasajeros)].map((_, i) => (
														<option key={i + 1} value={i + 1}>
															{i + 1} pasajero(s)
														</option>
													))}
												</select>
											</div>
										</div>
									</div>
								</div>

								{/* Opción de ida y vuelta */}
								<div className="bg-gray-50 rounded-lg p-6 space-y-4">
									<div className="flex items-start gap-3">
										<Checkbox
											id="ida-vuelta"
											checked={formData.idaVuelta}
											onCheckedChange={(value) => {
												const isRoundTrip = Boolean(value);
												setFormData((prev) => {
													if (isRoundTrip) {
														return {
															...prev,
															idaVuelta: true,
															fechaRegreso: prev.fechaRegreso || prev.fecha,
															horaRegreso: prev.horaRegreso,
														};
													}
													return {
														...prev,
														idaVuelta: false,
														fechaRegreso: "",
														horaRegreso: "",
													};
												});
											}}
										/>
										<div>
											<label htmlFor="ida-vuelta" className="text-sm font-medium text-gray-900 cursor-pointer">
												¿Deseas reservar también el regreso?
											</label>
											<p className="text-xs text-gray-600 mt-1">
												Coordina ida y vuelta en una sola solicitud. Obtienes 5% adicional de descuento.
											</p>
										</div>
									</div>
									
									{formData.idaVuelta && (
										<div className="grid grid-cols-1 md:grid-cols-2 gap-4 pt-4 border-t border-gray-200">
											<div className="space-y-2">
												<Label htmlFor="fecha-regreso" className="text-sm font-medium text-gray-700">Fecha regreso</Label>
												<Input
													id="fecha-regreso"
													type="date"
													name="fechaRegreso"
													min={formData.fecha || minDateTime}
													value={formData.fechaRegreso}
													onChange={handleInputChange}
													className="h-12"
													required={formData.idaVuelta}
												/>
											</div>
											<div className="space-y-2">
												<Label htmlFor="hora-regreso" className="text-sm font-medium text-gray-700">Hora regreso</Label>
												<Input
													id="hora-regreso"
													type="time"
													name="horaRegreso"
													value={formData.horaRegreso}
													onChange={handleInputChange}
													className="h-12"
													required={formData.idaVuelta}
												/>
											</div>
										</div>
									)}
								</div>
								{/* Precios */}
								{mostrarPrecio ? (
									<div className="bg-gradient-to-r from-primary/5 to-secondary/5 rounded-lg p-6 border border-primary/20">
										<div className="flex items-center justify-between mb-4">
											<div>
												<h5 className="font-semibold text-gray-900">{cotizacion.vehiculo}</h5>
												<p className="text-sm text-gray-600">Para {formData.pasajeros} pasajero(s)</p>
											</div>
											<div className="text-right">
												<p className="text-sm text-gray-500 line-through">{formatCurrency(pricing.precioBase)}</p>
												<p className="text-2xl font-bold text-primary">{formatCurrency(pricing.totalConDescuento)}</p>
												<p className="text-sm text-green-600 font-medium">
													Ahorras {formatCurrency(pricing.descuentoOnline)} ({totalDiscountPercentage}%)
												</p>
											</div>
										</div>
										
										<div className="flex flex-wrap gap-2">
											<Badge variant="secondary">Base {baseDiscountPercentage}%</Badge>
											{promoDiscountPercentage > 0 && (
												<Badge className="bg-emerald-500 text-white">Promo +{promoDiscountPercentage}%</Badge>
											)}
											{roundTripDiscountPercentage > 0 && (
												<Badge className="bg-sky-500 text-white">Ida & vuelta +{roundTripDiscountPercentage}%</Badge>
											)}
										</div>
									</div>
								) : (
									<div className="bg-blue-50 rounded-lg p-6 border border-blue-200">
										<div className="flex items-center gap-3">
											<div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
												<svg className="w-4 h-4 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
													<path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
												</svg>
											</div>
											<div>
												<p className="font-medium text-blue-900">Cotización personalizada</p>
												<p className="text-sm text-blue-700">Te enviaremos el precio exacto en menos de 30 minutos</p>
											</div>
										</div>
									</div>
								)}

								{/* Botón de continuar */}
								<div className="flex flex-col sm:flex-row sm:justify-between sm:items-center gap-4 pt-6 border-t border-gray-200">
									<p className="text-sm text-gray-600">
										¿No encuentras tu destino?{" "}
										<a href="#contacto" className="text-primary hover:underline font-medium">
											Contáctanos
										</a>{" "}
										para una cotización personalizada.
									</p>
									<Button
										type="button"
										className="w-full sm:w-auto bg-primary hover:bg-primary/90 text-white px-8 py-3 h-12"
										onClick={handleStepOneNext}
										disabled={isSubmitting}
									>
										Continuar con mis datos
									</Button>
								</div>
							</div>
						)}

						{currentStep === 1 && (
							<div className="space-y-8">
								{/* Información personal */}
								<div className="space-y-6">
									<h4 className="text-xl font-semibold text-gray-900 border-b pb-2">Información personal</h4>
									
									<div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
										<div className="space-y-4">
											<div className="space-y-2">
												<Label htmlFor="nombre-hero" className="text-sm font-medium text-gray-700">Nombre completo</Label>
												<Input
													id="nombre-hero"
													name="nombre"
													value={formData.nombre}
													onChange={handleInputChange}
													placeholder="Ej: Juan Pérez"
													className="h-12"
												/>
											</div>
											
											<div className="space-y-2">
												<Label htmlFor="email-hero" className="text-sm font-medium text-gray-700">Email</Label>
												<Input
													id="email-hero"
													type="email"
													name="email"
													value={formData.email}
													onChange={handleInputChange}
													placeholder="tu@email.cl"
													className="h-12"
												/>
											</div>
										</div>

										<div className="space-y-4">
											<div className="space-y-2">
												<Label htmlFor="telefono-hero" className="text-sm font-medium text-gray-700">Teléfono móvil</Label>
												<Input
													id="telefono-hero"
													name="telefono"
													value={formData.telefono}
													onChange={handleInputChange}
													placeholder="+56 9 1234 5678"
													className="h-12"
												/>
												{phoneError && (
													<p className="text-sm text-red-500">{phoneError}</p>
												)}
											</div>
											
											<div className="space-y-2">
												<Label htmlFor="numeroVuelo-hero" className="text-sm font-medium text-gray-700">
													Número de vuelo (opcional)
												</Label>
												<Input
													id="numeroVuelo-hero"
													name="numeroVuelo"
													value={formData.numeroVuelo}
													onChange={handleInputChange}
													placeholder="Ej: LA123"
													className="h-12"
												/>
											</div>
										</div>
									</div>
								</div>

								{/* Detalles adicionales */}
								<div className="space-y-6">
									<h4 className="text-xl font-semibold text-gray-900 border-b pb-2">Detalles adicionales</h4>
									
									<div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
										<div className="space-y-4">
											<div className="space-y-2">
												<Label htmlFor="hotel-hero" className="text-sm font-medium text-gray-700">Hotel o dirección final</Label>
												<Input
													id="hotel-hero"
													name="hotel"
													value={formData.hotel}
													onChange={handleInputChange}
													placeholder="Ej: Hotel Antumalal"
													className="h-12"
												/>
											</div>
											
											<div className="space-y-2">
												<Label htmlFor="sillaInfantil-hero" className="text-sm font-medium text-gray-700">
													¿Necesitas alzador infantil?
												</Label>
												<select
													id="sillaInfantil-hero"
													name="sillaInfantil"
													value={formData.sillaInfantil}
													onChange={handleInputChange}
													className="w-full h-12 px-4 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent transition-colors"
												>
													<option value="no">No requiero</option>
													<option value="1 silla">Sí, 1 alzador</option>
													<option value="2 sillas">Sí, 2 alzadores</option>
												</select>
											</div>
										</div>

										<div className="space-y-2">
											<Label htmlFor="equipajeEspecial-hero" className="text-sm font-medium text-gray-700">
												Equipaje extra o comentarios
											</Label>
											<Textarea
												id="equipajeEspecial-hero"
												name="equipajeEspecial"
												value={formData.equipajeEspecial}
												onChange={handleInputChange}
												placeholder="Cuéntanos sobre equipaje voluminoso, mascotas u otros detalles relevantes."
												className="min-h-[120px]"
											/>
										</div>
									</div>
								</div>

								{/* Resumen económico */}
								{mostrarPrecio && (
									<div className="bg-gray-50 rounded-lg p-6">
										<h4 className="text-lg font-semibold text-gray-900 mb-4">Resumen económico</h4>
										<div className="space-y-3">
											<div className="flex items-center justify-between text-sm">
												<span className="text-gray-600">Ahorro base (10%)</span>
												<span className="font-semibold text-green-600">
													{formatCurrency(pricing.descuentoBase)}
												</span>
											</div>
											{promoDiscountPercentage > 0 && (
												<div className="flex items-center justify-between text-sm">
													<span className="text-gray-600">Promo adicional (+{promoDiscountPercentage}%)</span>
													<span className="font-semibold text-green-600">
														{formatCurrency(pricing.descuentoPromocion)}
													</span>
												</div>
											)}
											<div className="border-t border-gray-200 pt-3">
												<div className="flex items-center justify-between text-sm font-semibold">
													<span className="text-gray-900">Ahorro total</span>
													<span className="text-green-600">
														{formatCurrency(pricing.descuentoOnline)} ({totalDiscountPercentage}%)
													</span>
												</div>
											</div>
											<div className="grid grid-cols-2 gap-4 pt-3 border-t border-gray-200">
												<div className="text-center">
													<p className="text-xs text-gray-500">Abono sugerido</p>
													<p className="font-semibold text-gray-900">{formatCurrency(pricing.abono)}</p>
												</div>
												<div className="text-center">
													<p className="text-xs text-gray-500">Saldo al llegar</p>
													<p className="font-semibold text-gray-900">{formatCurrency(pricing.saldoPendiente)}</p>
												</div>
											</div>
										</div>
									</div>
								)}

								{/* Botones de navegación */}
								<div className="flex flex-col sm:flex-row sm:justify-between sm:items-center gap-4 pt-6 border-t border-gray-200">
									<Button
										type="button"
										variant="outline"
										className="w-full sm:w-auto"
										onClick={handleStepBack}
										disabled={isSubmitting}
									>
										Volver al paso anterior
									</Button>
									<Button
										type="button"
										className="w-full sm:w-auto bg-primary hover:bg-primary/90 text-white px-8 py-3 h-12"
										onClick={handleStepTwoNext}
										disabled={isSubmitting}
									>
										{isSubmitting ? (
											<>
												<LoaderCircle className="mr-2 h-4 w-4 animate-spin" />
												Generando resumen...
											</>
										) : (
											"Revisar resumen y pagar"
										)}
									</Button>
								</div>
							</div>
						)}

						{currentStep === 2 && (
							<div className="space-y-8">
								{/* Resumen del viaje */}
								<div className="bg-white rounded-lg border border-gray-200 p-6">
									<h4 className="text-xl font-semibold text-gray-900 mb-6 border-b pb-2">Resumen de tu traslado</h4>
									
									<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
										<div className="space-y-2">
											<p className="text-sm font-medium text-gray-500">Origen</p>
											<p className="text-lg font-semibold text-gray-900">{origenFinal}</p>
										</div>
										<div className="space-y-2">
											<p className="text-sm font-medium text-gray-500">Destino</p>
											<p className="text-lg font-semibold text-gray-900">{destinoFinal}</p>
										</div>
										<div className="space-y-2">
											<p className="text-sm font-medium text-gray-500">Fecha</p>
											<p className="text-lg font-semibold text-gray-900">{fechaLegible}</p>
										</div>
										<div className="space-y-2">
											<p className="text-sm font-medium text-gray-500">Hora</p>
											<p className="text-lg font-semibold text-gray-900">{horaLegible}</p>
										</div>
										<div className="space-y-2">
											<p className="text-sm font-medium text-gray-500">Pasajeros</p>
											<p className="text-lg font-semibold text-gray-900">{pasajerosLabel}</p>
										</div>
										<div className="space-y-2">
											<p className="text-sm font-medium text-gray-500">Vehículo</p>
											<p className="text-lg font-semibold text-gray-900">{vehiculoSugerido}</p>
										</div>
									</div>
									
									{formData.idaVuelta && (
										<div className="mt-6 p-4 bg-blue-50 rounded-lg border border-blue-200">
											<div className="flex items-center gap-2 mb-2">
												<svg className="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
													<path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7h12m0 0l-4-4m4 4l-4 4m0 6H4m0 0l4 4m-4-4l4-4" />
												</svg>
												<p className="font-semibold text-blue-900">Regreso incluido</p>
											</div>
											<p className="text-sm text-blue-700">
												{formData.fechaRegreso || "Por definir"} · {formData.horaRegreso || "Por definir"} hrs
											</p>
										</div>
									)}
								</div>

								{/* Sección de pago o cotización manual */}
								{requiereCotizacionManual ? (
									<div className="bg-orange-50 rounded-lg p-6 border border-orange-200">
										<div className="flex items-center gap-3 mb-4">
											<div className="w-8 h-8 bg-orange-100 rounded-full flex items-center justify-center">
												<svg className="w-4 h-4 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
													<path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" />
												</svg>
											</div>
											<div>
												<h4 className="font-semibold text-orange-900">Cotización personalizada necesaria</h4>
												<p className="text-sm text-orange-700">Este destino requiere confirmación manual</p>
											</div>
										</div>
										<p className="text-sm text-orange-800 mb-4">
											Te enviaremos el precio exacto y disponibilidad en menos de 30 minutos.
										</p>
										<Button
											asChild
											className="w-full sm:w-auto bg-orange-600 hover:bg-orange-700 text-white"
										>
											<a href="#contacto">Ir al formulario de contacto</a>
										</Button>
									</div>
									) : (
										<div className="bg-gray-50 rounded-lg p-6">
											<h4 className="text-lg font-semibold text-gray-900 mb-4">Resumen de pago</h4>
											<div className="space-y-3">
												<div className="flex items-center justify-between text-sm">
													<span className="text-gray-600">Descuento base (10%)</span>
													<span className="font-semibold text-green-600">
														-{formatCurrency(pricing.descuentoBase)}
													</span>
												</div>
												{promoDiscountPercentage > 0 && (
													<div className="flex items-center justify-between text-sm">
														<span className="text-gray-600">Promo adicional (+{promoDiscountPercentage}%)</span>
														<span className="font-semibold text-green-600">
															-{formatCurrency(pricing.descuentoPromocion)}
														</span>
													</div>
												)}
												<div className="border-t border-gray-200 pt-3">
													<div className="flex items-center justify-between text-sm font-semibold">
														<span className="text-gray-900">Ahorro total</span>
														<span className="text-green-600">
															-{formatCurrency(pricing.descuentoOnline)} ({totalDiscountPercentage}%)
														</span>
													</div>
												</div>
												<div className="border-t border-gray-200 pt-3">
													<div className="flex items-center justify-between text-lg font-bold">
														<span className="text-gray-900">Total con descuento</span>
														<span className="text-primary">{formatCurrency(pricing.totalConDescuento)}</span>
													</div>
												</div>
											</div>
										</div>
									)}
								</div>

								{!requiereCotizacionManual && (
									<>
										{/* Promoción activa */}
										{activePromotion && (
											<div className="bg-emerald-50 rounded-lg p-4 border border-emerald-200">
												<div className="flex items-center gap-2 mb-2">
													<svg className="w-5 h-5 text-emerald-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
														<path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1" />
													</svg>
													<p className="font-semibold text-emerald-900">
														Descuento especial {activePromotion.descuentoPorcentaje}%
													</p>
												</div>
												<p className="text-sm text-emerald-800">
													{activePromotion.descripcion || `Tramo ${activePromotion.destino}`}
												</p>
												{promotionDetails && (
													<p className="text-xs text-emerald-700 mt-1">{promotionDetails}</p>
												)}
											</div>
										)}

										{/* Opciones de pago */}
										<div className="space-y-6">
											<div>
												<h4 className="text-lg font-semibold text-gray-900 mb-4">Selecciona el monto a pagar</h4>
												<div className="grid gap-4 md:grid-cols-2">
													{chargeOptions.map((option) => {
														const isSelected = selectedCharge === option.id;
														const isDisabled = option.disabled;
														return (
															<button
																key={option.id}
																type="button"
																onClick={() => !isDisabled && setSelectedCharge(option.id)}
																disabled={isDisabled}
																className={`p-6 rounded-lg border-2 transition-all ${
																	isSelected
																		? "border-primary bg-primary/5 ring-2 ring-primary/20"
																		: "border-gray-200 hover:border-primary/40"
																} ${isDisabled ? "opacity-50 cursor-not-allowed" : "cursor-pointer"}`}
															>
																<div className="text-left">
																	<h5 className="font-semibold text-gray-900 mb-1">{option.title}</h5>
																	<p className="text-sm text-gray-600 mb-3">{option.subtitle}</p>
																	<p className="text-xl font-bold text-primary">{formatCurrency(option.amount)}</p>
																	{isSelected && (
																		<div className="mt-2 text-xs font-semibold text-primary uppercase">
																			✓ Seleccionado
																		</div>
																	)}
																</div>
															</button>
														);
													})}
												</div>
											</div>

											<div>
												<h4 className="text-lg font-semibold text-gray-900 mb-4">Selecciona tu medio de pago</h4>
												<div className="grid gap-4 md:grid-cols-2">
													{paymentMethods.map((method) => {
														const isSelected = selectedMethod === method.id;
														const methodLoading = loadingGateway === `${method.gateway}-${selectedChargeData?.type}`;
														return (
															<button
																key={method.id}
																type="button"
																onClick={() => setSelectedMethod(method.id)}
																disabled={isAnotherGatewayLoading}
																className={`p-4 rounded-lg border-2 transition-all ${
																	isSelected
																		? "border-primary bg-primary/5 ring-2 ring-primary/20"
																		: "border-gray-200 hover:border-primary/40"
																}`}
															>
																<div className="flex items-center gap-4">
																	<div className="h-12 w-12 flex-shrink-0 overflow-hidden rounded-md bg-white shadow-sm border">
																		<img
																			src={method.image}
																			alt={method.title}
																			className="h-full w-full object-contain p-2"
																			loading="lazy"
																		/>
																	</div>
																	<div className="flex-1 text-left">
																		<h5 className="font-semibold text-gray-900">{method.title}</h5>
																		<p className="text-sm text-gray-600">{method.subtitle}</p>
																		{methodLoading && (
																			<p className="text-xs text-primary mt-1">Generando enlace...</p>
																		)}
																	</div>
																	{isSelected && !methodLoading && (
																		<div className="text-xs font-semibold text-primary uppercase">
																			✓ Seleccionado
																		</div>
																	)}
																</div>
															</button>
														);
													})}
												</div>
											</div>

											{/* Confirmación final */}
											<div className="bg-gray-50 rounded-lg p-6">
												<h4 className="text-lg font-semibold text-gray-900 mb-4">Confirmación final</h4>
												<div className="space-y-4">
													<div className="flex items-start gap-3">
														<Checkbox
															id="check-viaje"
															checked={reviewChecklist.viaje}
															onCheckedChange={(value) =>
																setReviewChecklist((prev) => ({
																	...prev,
																	viaje: Boolean(value),
																}))
															}
														/>
														<label htmlFor="check-viaje" className="text-sm text-gray-700 cursor-pointer">
															Confirmo que revisé origen, destino, fecha y hora de mi traslado.
														</label>
													</div>
													<div className="flex items-start gap-3">
														<Checkbox
															id="check-contacto"
															checked={reviewChecklist.contacto}
															onCheckedChange={(value) =>
																setReviewChecklist((prev) => ({
																	...prev,
																	contacto: Boolean(value),
																}))
															}
														/>
														<label htmlFor="check-contacto" className="text-sm text-gray-700 cursor-pointer">
															Acepto recibir la confirmación y enlace de pago por email y WhatsApp.
														</label>
													</div>
													{!canPay && (
														<p className="text-sm text-orange-600">
															Marca ambas casillas para habilitar las opciones de pago.
														</p>
													)}
												</div>
											</div>

											{/* Botones finales */}
											<div className="flex flex-col sm:flex-row sm:justify-between sm:items-center gap-4 pt-6 border-t border-gray-200">
												<Button
													type="button"
													variant="outline"
													className="w-full sm:w-auto"
													onClick={handleStepBack}
													disabled={isSubmitting || Boolean(loadingGateway)}
												>
													Editar información
												</Button>
												<Button
													type="button"
													className="w-full sm:w-auto bg-primary hover:bg-primary/90 text-white px-8 py-3 h-12"
													onClick={() => {
														if (selectedMethodData && selectedChargeData && !selectedCombinationLoading) {
															handlePayment(selectedMethodData.gateway, selectedChargeData.type);
														}
													}}
													disabled={!canTriggerPayment || selectedCombinationLoading}
												>
													{selectedCombinationLoading ? (
														<>
															<LoaderCircle className="mr-2 h-4 w-4 animate-spin" />
															Procesando pago...
														</>
													) : selectedMethodData && selectedChargeData ? (
														`Pagar ${formatCurrency(selectedChargeData.amount)} con ${selectedMethodData.title}`
													) : (
														"Selecciona un medio de pago"
													)}
												</Button>
											</div>
									</>
								)}
							</div>
						)}
						{stepError && (
							<div className="rounded-lg border border-destructive/30 bg-destructive/10 p-4 text-sm text-destructive">
								{stepError}
							</div>
						)}
					</CardContent>
				</Card>
			</div>
		</section>
	);
}

export default Hero;
